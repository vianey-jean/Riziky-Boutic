
/**
 * SERVICE DE S√âCURISATION DES IDS - Module Principal
 * 
 * Ce module est le point d'entr√©e principal pour toutes les fonctionnalit√©s
 * de s√©curisation des IDs et routes. Il orchestre les autres modules sp√©cialis√©s.
 */

// Imports des modules sp√©cialis√©s
import { 
  generateSecureId as coreGenerateSecureId, 
  EntityType, 
  extractEntityType as coreExtractEntityType 
} from './security/core/secureIdGenerator';

import { 
  storeIdMapping, 
  getSecureIdFromReal, 
  getRealIdFromSecure, 
  resetMappings 
} from './security/storage/mappingStorage';

import { 
  getSecureRoute as routingGetSecureRoute, 
  getRealRoute as routingGetRealRoute, 
  initializeSecureRoutes as routingInitSecureRoutes 
} from './security/routing/routeSecurity';

import { 
  isValidSecureId as validatorIsValidSecureId, 
  isValidSecureOrderId, 
  isValidSecureProductId 
} from './security/validation/securityValidator';

// R√©export des types pour compatibilit√©
export type { EntityType };

/**
 * G√©n√®re un ID s√©curis√© pour un ID r√©el donn√©
 * @param realId - L'ID r√©el √† s√©curiser
 * @param type - Type d'entit√© (produit, commande, etc.)
 * @returns ID s√©curis√© unique
 */
export const generateSecureId = (realId: string, type: EntityType = 'product'): string => {
  const secureId = coreGenerateSecureId(realId, type);
  storeIdMapping(realId, secureId);
  
  console.log(`üîê ID s√©curis√© g√©n√©r√©: ${type} ${realId} ‚Üí ${secureId}`);
  return secureId;
};

/**
 * Obtient l'ID r√©el √† partir d'un ID s√©curis√©
 * @param secureId - L'ID s√©curis√©
 * @returns L'ID r√©el correspondant ou undefined si non trouv√©
 */
export const getRealId = (secureId: string): string | undefined => {
  return getRealIdFromSecure(secureId);
};

/**
 * Obtient l'ID s√©curis√© pour un ID r√©el (g√©n√®re si n√©cessaire)
 * @param realId - L'ID r√©el
 * @param type - Type d'entit√©
 * @returns L'ID s√©curis√© correspondant
 */
export const getSecureId = (realId: string, type: EntityType = 'product'): string => {
  // V√©rifier si un ID s√©curis√© existe d√©j√†
  const existingId = getSecureIdFromReal(realId);
  
  if (existingId) {
    // Pour les commandes, v√©rifier le format sp√©cial
    if (type === 'order' && !existingId.includes('_')) {
      return existingId;
    }
    
    // Pour les autres types, v√©rifier le pr√©fixe
    if (existingId.startsWith(`${type}_`)) {
      return existingId;
    }
  }
  
  // G√©n√©rer un nouvel ID si n√©cessaire
  return generateSecureId(realId, type);
};

/**
 * Raccourci pour obtenir un ID s√©curis√© de produit
 * @param productId - L'ID du produit
 * @returns L'ID s√©curis√© du produit
 */
export const getSecureProductId = (productId: string): string => {
  return getSecureId(productId, 'product');
};

/**
 * Raccourci pour obtenir un ID s√©curis√© de commande
 * @param orderId - L'ID de la commande
 * @returns L'ID s√©curis√© de la commande
 */
export const getSecureOrderId = (orderId: string): string => {
  return getSecureId(orderId, 'order');
};

/**
 * Obtient une route s√©curis√©e pour une route donn√©e
 * @param routePath - Chemin de la route r√©elle
 * @returns Route s√©curis√©e
 */
export const getSecureRoute = (routePath: string): string => {
  return routingGetSecureRoute(routePath);
};

/**
 * Obtient la route r√©elle √† partir d'une route s√©curis√©e
 * @param secureRoute - Route s√©curis√©e (sans le '/' initial)
 * @returns La route r√©elle ou undefined si non trouv√©e
 */
export const getRealRoute = (secureRoute: string): string | undefined => {
  return routingGetRealRoute(secureRoute);
};

/**
 * V√©rifie si un ID s√©curis√© est valide
 * @param secureId - L'ID s√©curis√© √† v√©rifier
 * @returns true si l'ID est valide, false sinon
 */
export const isValidSecureId = (secureId: string): boolean => {
  return validatorIsValidSecureId(secureId);
};

/**
 * Obtient le type d'entit√© √† partir d'un ID s√©curis√©
 * @param secureId - L'ID s√©curis√©
 * @returns Le type d'entit√© ou undefined si non trouv√©
 */
export const getEntityType = (secureId: string): EntityType | undefined => {
  return coreExtractEntityType(secureId);
};

/**
 * R√©initialise tous les mappings d'IDs
 * √Ä appeler lors de la d√©connexion ou du changement de navigation
 */
export const resetSecureIds = (): void => {
  resetMappings();
};

/**
 * Initialise les routes s√©curis√©es
 * @returns Map des routes s√©curis√©es initialis√©es
 */
export const initSecureRoutes = (): Map<string, string> => {
  return routingInitSecureRoutes();
};

// Fonctions de validation sp√©cialis√©es pour compatibilit√©
export { isValidSecureOrderId, isValidSecureProductId };

// Initialisation automatique des routes au chargement
initSecureRoutes();

console.log('üîê Service de s√©curisation des IDs initialis√©');
